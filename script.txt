Slide 1 â€“ Page de Titre (30 sec)

Comme vous le savez dÃ©jÃ , durant ce dernier mois j'ai eu Ã  dÃ©velopper un agent AI destinÃ© au troubleshooting d'applications web. 

Slide 2 â€“ ProblÃ©matique & Contexte (2 min)

Le problÃ¨me est simple : Un diagnostic manuel peut prendre des heures, voire des jours.Lâ€™analyse des logs exige une expertise pointue.
Chaque dÃ©veloppeur a sa propre mÃ©thode, ce qui crÃ©e un manque de standardisation.
Et en cas dâ€™incident critique, chaque minute compte.
Imaginez une application e-commerce en panne Ã  2h du matin.
Lâ€™Ã©quipe doit rÃ©agir, mais sans outils automatisÃ©s, la perte de temps est Ã©norme et les coÃ»ts dâ€™arrÃªt peuvent Ãªtre catastrophiques.

Câ€™est face Ã  ces dÃ©fis que jâ€™ai conÃ§u Agent Tetra, qui combine lâ€™IA et une interface moderne pour accÃ©lÃ©rer le diagnostic.

Slide 3 â€“ Solution ProposÃ©e (2 min)

Troubleshooting Agent Tetra, câ€™est :
Un agent IA qui pense comme un expert,
Une interface web intuitive utilisable par tous,
Une analyse automatique qui anticipe les problÃ¨mes.
Avec des rÃ©sultats concrets :
Jusquâ€™Ã  80% de temps gagnÃ© sur le diagnostic,
Une standardisation des mÃ©thodes,
Une rÃ©activitÃ© accrue pour limiter les pertes,
Et surtout un soutien direct aux Ã©quipes DevOps.

Slide 4 â€“ FonctionnalitÃ©s Principales (2 min)
Lâ€™agent propose quatre blocs majeurs :
Analyse automatique des logs : dÃ©tection intelligente des erreurs et comprÃ©hension du contexte.
VÃ©rifications systÃ¨me : monitoring des ressources, tests rÃ©seau et contrÃ´le des services.
Interface web interactive : navigation fluide, chat en temps rÃ©el avec lâ€™IA et suivi visuel.
GÃ©nÃ©ration de rapports : Markdown clair, historique complet et recommandations actionnables.

Slide 5 â€“ Technologies UtilisÃ©es (2 min)

Pour Ã§a, jâ€™ai choisi une stack adaptÃ©e :
FastAPI : rapide, moderne, documentÃ© automatiquement.
Pydantic v2 : validation robuste des donnÃ©es.
GPT-4 dâ€™OpenAI : intelligence contextuelle de pointe.
PostgreSQL : base fiable pour stocker les sessions.
psutil : monitoring prÃ©cis des ressources systÃ¨me.
Cette combinaison offre performance, sÃ©curitÃ©, intelligence et fiabilitÃ©.

Slide 6 â€“ Architecture du SystÃ¨me (2 min)

Lâ€™architecture se compose de :

Frontend : interface web moderne, navigation et chat.
Backend : API FastAPI performante.
IA GPT-4 : prompts dynamiques et adaptatifs.
Outils de diagnostic : 7 modules spÃ©cialisÃ©s.
Persistance : PostgreSQL pour lâ€™historique.
IntÃ©grations externes : alertes Teams.
Le tout repose sur une architecture modulaire et extensible avec des communications en temps rÃ©el.

Slide 7 â€“ Architecture Technique DÃ©taillÃ©e (3 min)

Sur le plan technique :
Une classe abstraite BaseTool dÃ©finit le modÃ¨le.
7 outils hÃ©ritent de cette classe : analyse de fichiers, checks systÃ¨mes, connectivitÃ©, etc.
Un Pattern Factory gÃ¨re la crÃ©ation dynamique.
Des gestionnaires comme DatabaseManager, ReportManager et TroubleshootingSession assurent la persistance et la traÃ§abilitÃ©.
ğŸ‘‰ RÃ©sultat : une architecture propre, maintenable et extensible.

Slide 8 â€“ Flux de Travail du Diagnostic (3 min)

Le diagnostic suit 5 Ã©tapes :
Initialisation : choix du dossier Ã  analyser.
Lancement automatique de lâ€™agent.
Analyse avec les diffÃ©rents outils.
GÃ©nÃ©ration du rapport et sauvegarde.
Notification via Teams si nÃ©cessaire.
Chaque Ã©tape est tracÃ©e, interactive et automatisÃ©e.

Slide 9 â€“ Plan de Base de DonnÃ©es (2 min)

La base est simple et efficace :
Une table principale pour les sessions,
Stockage HTML pour les rÃ©sultats,
Horodatage pour la traÃ§abilitÃ©,
Index optimisÃ©s pour les performances.
ğŸ‘‰ Une structure flexible, fiable et maintenable.

Slide 10 â€“ RÃ©sultats Obtenus (2 min)

Ã€ ce stade, jâ€™ai :
Une interface web fonctionnelle,
Un agent IA opÃ©rationnel avec 7 outils,
Une base PostgreSQL robuste,
Des rapports automatiques,
Une intÃ©gration Teams en temps rÃ©el.
Avec des mÃ©triques claires :
Couverture de 3 types de problÃ¨mes majeurs,
Rapports gÃ©nÃ©rÃ©s en temps rÃ©el,
Architecture modulaire avec 5 composants principaux.

Slide 11 â€“ DifficultÃ©s & Solutions (3 min)

Quelques dÃ©fis relevÃ©s :
Prompts dynamiques : rÃ©solus avec Jinja2 et templates adaptatifs.
Optimisation du prompt systÃ¨me : prompts courts, diagnostics prÃ©cis.
Interface temps rÃ©el : rÃ©solue avec fichiers temporaires et polling intelligent.
Validation complexe des donnÃ©es : solution via Pydantic et classes abstraites.
ModularitÃ© des outils : gÃ©rÃ©e avec une Factory Pattern dynamique.
ğŸ‘‰ Chaque difficultÃ© a renforcÃ© la robustesse du projet.

Slide 12 â€“ Perspectives (2 min)

Les Ã©volutions prÃ©vues :
IntÃ©grations avancÃ©es : Kubernetes, Prometheus, Grafana.
IA plus intelligente : apprentissage des sessions passÃ©es, prÃ©vention proactive.
Nouvelles fonctionnalitÃ©s : dashboard, API complÃ¨te, multi-utilisateurs.
DÃ©ploiement industrialisÃ© : Docker, Kubernetes, CI/CD.
Lâ€™impact attendu : gain massif de temps, satisfaction accrue et standardisation du troubleshooting.

Slide 13 Ã  17 â€“ Annexes (4 min)

Jâ€™ai prÃ©parÃ© 4 annexes techniques :
Architecture Globale,
Diagramme de SÃ©quence dÃ©taillÃ©,
Communication Temps RÃ©el,
Stack complet des technologies.
Ces annexes permettent de plonger plus en profondeur dans les aspects techniques.

Conclusion (1 min)

En rÃ©sumÃ©, Troubleshooting Agent Tetra dÃ©montre :
La puissance de lâ€™IA appliquÃ©e au diagnostic IT,
Lâ€™importance dâ€™une architecture modulaire,
Et lâ€™impact concret en termes de productivitÃ© et de fiabilitÃ©.
ğŸ‘‰ Ce projet ouvre la voie Ã  lâ€™automatisation intelligente du troubleshooting.

Questions & Discussion (3-5 min)

Je suis ouverte Ã  vos questions, notamment sur :
La sÃ©curitÃ© des donnÃ©es et la gestion des API keys,
Le coÃ»t dâ€™OpenAI et lâ€™optimisation des prompts,
La scalabilitÃ© et les perspectives DevOps,
Ou encore la maintenance et le support.